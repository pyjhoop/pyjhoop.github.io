{"version":3,"file":"component---src-templates-post-template-index-tsx-e0a228af03bcef7dce79.js","mappings":"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","sources":["webpack://danmin-gatsby-blog/./src/components/Utterances/styled.ts","webpack://danmin-gatsby-blog/./src/components/Utterances/index.tsx","webpack://danmin-gatsby-blog/./src/models/post.ts","webpack://danmin-gatsby-blog/./src/components/PostHeader/styled.ts","webpack://danmin-gatsby-blog/./src/components/PostHeader/index.tsx","webpack://danmin-gatsby-blog/./src/components/PostNavigator/styled.ts","webpack://danmin-gatsby-blog/./src/components/PostNavigator/index.tsx","webpack://danmin-gatsby-blog/./src/templates/post-template/styled.ts","webpack://danmin-gatsby-blog/./src/templates/post-template/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  margin: 30px 0;\r\n`;\r\n","import { ThemeManagerContext } from 'gatsby-emotion-dark-mode';\r\nimport React, { createRef, useContext, useEffect, useRef } from 'react';\r\n\r\nimport * as S from './styled';\r\n\r\nconst src = 'https://utteranc.es/client.js';\r\nconst branch = 'main';\r\n\r\ntype UtterancesProps = {\r\n  repo: string;\r\n  path: string;\r\n};\r\n\r\nconst Utterances: React.FC<UtterancesProps> = ({ repo, path }) => {\r\n  const rootElm = createRef<HTMLDivElement>();\r\n  const isUtterancesLoaded = useRef(false);\r\n  const theme = useContext(ThemeManagerContext);\r\n\r\n  useEffect(() => {\r\n    if (!rootElm.current) return;\r\n\r\n    const utterances = document.createElement('script');\r\n    const utterancesConfig: { [key: string]: unknown } = {\r\n      src,\r\n      repo,\r\n      branch,\r\n      'theme': theme.isDark ? 'photon-dark' : 'github-light',\r\n      'label': 'comment',\r\n      'async': true,\r\n      'issue-term': 'pathname',\r\n      'crossorigin': 'anonymous',\r\n    };\r\n\r\n    Object.keys(utterancesConfig).forEach((configKey) => {\r\n      utterances.setAttribute(configKey, utterancesConfig[configKey] as string);\r\n    });\r\n    rootElm.current.appendChild(utterances);\r\n\r\n    if (isUtterancesLoaded.current) {\r\n      rootElm.current.replaceChild(utterances, rootElm.current.firstChild as Node);\r\n    } else {\r\n      isUtterancesLoaded.current = true;\r\n    }\r\n  }, [rootElm, path, theme.isDark]);\r\n\r\n  return <S.Wrapper className='utterances' ref={rootElm} />;\r\n};\r\n\r\nexport default Utterances;\r\n","import { MarkdownRemark } from '../type';\r\n\r\nexport default class PostClass {\r\n  id;\r\n  excerpt;\r\n  emoji;\r\n  html;\r\n  slug;\r\n  title;\r\n  author;\r\n  date;\r\n  categories;\r\n  filteredCategories;\r\n\r\n  constructor(node: MarkdownRemark) {\r\n    const { id, html, excerpt, frontmatter, fields } = node;\r\n    const { slug } = fields;\r\n    const { emoji, categories, title, author, date } = frontmatter;\r\n\r\n    const categoryArr = categories.split(' ');\r\n\r\n    this.id = id;\r\n    this.excerpt = excerpt;\r\n    this.emoji = emoji;\r\n    this.html = html;\r\n    this.slug = slug;\r\n    this.title = title;\r\n    this.author = author;\r\n    this.date = date;\r\n    this.categories = categoryArr;\r\n    this.filteredCategories = categoryArr.map((category) => {\r\n      return category.replace('featured-', '').trim();\r\n    });\r\n  }\r\n}\r\n","import styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\n\r\nimport { hoverUnderline, MOBILE_MEDIA_QUERY } from '@/src/styles/const';\r\n\r\nexport const Header = styled.header`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  padding-bottom: 40px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.gray20};\r\n  margin: 40px 0;\r\n  word-break: keep-all;\r\n`;\r\n\r\nexport const Emoji = styled.div`\r\n  font-size: 78px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Info = styled.div`\r\n  display: flex;\r\n  font-size: 15px;\r\n  color: ${({ theme }) => theme.color.gray80};\r\n  font-family: GmarketSansLight;\r\n`;\r\n\r\nexport const Categories = styled.div`\r\n  margin-bottom: 5px;\r\n  font-size: 15px;\r\n`;\r\n\r\nexport const Category = styled(Link)`\r\n  margin-right: 4px;\r\n  color: ${({ theme }) => theme.color.gray60};\r\n  ${({ theme }) => hoverUnderline(theme)};\r\n  &:after {\r\n    background-color: ${({ theme }) => theme.color.gray60};\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 32px;\r\n  margin-bottom: 6px;\r\n  line-height: 1.3;\r\n\r\n  @media ${MOBILE_MEDIA_QUERY} {\r\n    font-size: 25px;\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport PostClass from '@/src/models/post';\r\n\r\nimport * as S from './styled';\r\n\r\ntype PostHeaderProps = {\r\n  post: PostClass;\r\n};\r\n\r\nconst PostHeader: React.FC<PostHeaderProps> = ({ post }) => {\r\n  return (\r\n    <S.Header>\r\n      {post.emoji && <S.Emoji>{post.emoji}</S.Emoji>}\r\n      <S.Categories>\r\n        {post.filteredCategories.map((category) => (\r\n          <S.Category key={category} to={`/posts/${category}`}>\r\n            {category}\r\n          </S.Category>\r\n        ))}\r\n      </S.Categories>\r\n\r\n      <S.Title>{post.title}</S.Title>\r\n      <S.Info>{post.date}</S.Info>\r\n    </S.Header>\r\n  );\r\n};\r\n\r\nexport default PostHeader;\r\n","import styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  width: 100%;\r\n  grid-template-columns: 49.3% 49.3%;\r\n  column-gap: 1.4%;\r\n`;\r\n\r\nexport const PostCard = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  background-color: ${({ theme }) => theme.color.gray10};\r\n  border-radius: 6px;\r\n  padding: 15px;\r\n  height: 105px;\r\n\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.color.gray20};\r\n    .title {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n\r\n  &.prev {\r\n    margin-right: auto;\r\n  }\r\n\r\n  &.next {\r\n    margin-left: auto;\r\n  }\r\n`;\r\n\r\nexport const Direction = styled.div`\r\n  color: ${({ theme }) => theme.color.gray60};\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  font-size: 16px;\r\n  line-height: 150%;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  word-break: break-word;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n`;\r\n","import React from 'react';\r\n\r\nimport PostClass from '@/src/models/post';\r\n\r\nimport * as S from './styled';\r\n\r\ntype PostNavigatorProps = {\r\n  prevPost: PostClass;\r\n  nextPost: PostClass;\r\n};\r\n\r\nconst PostNavigator: React.FC<PostNavigatorProps> = ({ prevPost, nextPost }) => {\r\n  return (\r\n    <S.Wrapper>\r\n      <div>\r\n        {nextPost && (\r\n          <S.PostCard className='prev' key={nextPost.id} to={nextPost.slug}>\r\n            <S.Direction>이전 글</S.Direction>\r\n            <S.Title>{nextPost.title}</S.Title>\r\n          </S.PostCard>\r\n        )}\r\n      </div>\r\n      <div>\r\n        {prevPost && (\r\n          <S.PostCard className='next' key={prevPost.id} to={prevPost.slug}>\r\n            <S.Direction>다음 글</S.Direction>\r\n            <S.Title>{prevPost.title}</S.Title>\r\n          </S.PostCard>\r\n        )}\r\n      </div>\r\n    </S.Wrapper>\r\n  );\r\n};\r\n\r\nexport default PostNavigator;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const PostContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const BuyMeACoffeeWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 40px 0;\r\n  gap: 20px;\r\n`;\r\n","import { graphql } from 'gatsby';\r\nimport React from 'react';\r\n\r\nimport BuyMeACoffee from '@/src/components/BuyMeACoffee';\r\nimport PostHeader from '@/src/components/PostHeader';\r\nimport PostNavigator from '@/src/components/PostNavigator';\r\nimport Seo from '@/src/components/Seo';\r\nimport Utterances from '@/src/components/Utterances';\r\nimport Layout from '@/src/layout';\r\nimport PostClass from '@/src/models/post';\r\nimport { Post, SiteMetadata } from '@/src/type';\r\n\r\nimport * as S from './styled';\r\n\r\ntype PostTemplateProps = {\r\n  location: Location;\r\n  data: { prev: Post; next: Post; cur: Post; site: { siteMetadata: SiteMetadata }; markdownRemark: Post };\r\n};\r\n\r\nconst PostTemplate: React.FC<PostTemplateProps> = ({ location, data }) => {\r\n  const curPost = new PostClass(data.cur);\r\n  const prevPost = data.prev && new PostClass(data.prev);\r\n  const nextPost = data.next && new PostClass(data.next);\r\n  const utterancesRepo = data.site.siteMetadata.comments.utterances.repo;\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <Seo title={`개발자 단민 | ${curPost?.title}`} description={curPost?.excerpt} />\r\n      <PostHeader post={curPost} />\r\n      <S.PostContent>\r\n        <div className='markdown' dangerouslySetInnerHTML={{ __html: curPost.html }} />\r\n      </S.PostContent>\r\n      <S.BuyMeACoffeeWrapper>\r\n        <div>👇 도움이 되셨다면 👇</div>\r\n        <BuyMeACoffee />\r\n      </S.BuyMeACoffeeWrapper>\r\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\r\n      <Utterances repo={utterancesRepo} path={curPost.slug} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default PostTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query ($slug: String, $nextSlug: String, $prevSlug: String) {\r\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      html\r\n      excerpt(pruneLength: 500, truncate: true)\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        title\r\n        categories\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        title\r\n        categories\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        title\r\n        categories\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    site {\r\n      siteMetadata {\r\n        siteUrl\r\n        comments {\r\n          utterances {\r\n            repo\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["Wrapper","_styled","target","name","styles","_ref","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","theme","useContext","ThemeManagerContext","useEffect","current","utterances","document","createElement","utterancesConfig","src","branch","isDark","Object","keys","forEach","configKey","setAttribute","appendChild","replaceChild","firstChild","___EmotionJSX","S","className","ref","PostClass","node","id","html","excerpt","frontmatter","slug","fields","emoji","categories","title","author","date","categoryArr","split","this","filteredCategories","map","category","replace","trim","Header","color","gray20","Emoji","Info","_ref2","gray80","Categories","Category","Link","_ref3","gray60","_ref4","hoverUnderline","_ref5","Title","MOBILE_MEDIA_QUERY","post","key","to","PostCard","gray10","Direction","prevPost","nextPost","PostContent","BuyMeACoffeeWrapper","location","data","curPost","cur","prev","next","utterancesRepo","site","siteMetadata","comments","Layout","Seo","description","PostHeader","dangerouslySetInnerHTML","__html","BuyMeACoffee","PostNavigator","Utterances"],"sourceRoot":""}