{"version":3,"file":"component---src-pages-guestbook-tsx-8f5eb2718ba485fdab99.js","mappings":"qLAEO,IAAMA,GAAOC,E,QAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,kB,UC8CpB,EAnC8C,SAAHC,GAAwB,IAAlBC,EAAID,EAAJC,KAAMC,EAAIF,EAAJE,KAC/CC,GAAUC,EAAAA,EAAAA,aACVC,GAAqBC,EAAAA,EAAAA,SAAO,GAC5BC,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,GA6BzB,OA3BAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAQQ,QAAb,CAEA,IAAMC,EAAaC,SAASC,cAAc,UACpCC,EAA+C,CACnDC,IAlBM,gCAmBNf,KAAAA,EACAgB,OAnBS,OAoBT,MAASV,EAAMW,OAAS,cAAgB,eACxC,MAAS,UACT,OAAS,EACT,aAAc,WACd,YAAe,aAGjBC,OAAOC,KAAKL,GAAkBM,SAAQ,SAACC,GACrCV,EAAWW,aAAaD,EAAWP,EAAiBO,GACtD,IACAnB,EAAQQ,QAAQa,YAAYZ,GAExBP,EAAmBM,QACrBR,EAAQQ,QAAQc,aAAab,EAAYT,EAAQQ,QAAQe,YAEzDrB,EAAmBM,SAAU,CAtBH,CAwB9B,GAAG,CAACR,EAASD,EAAMK,EAAMW,UAElBS,EAAAA,EAAAA,KAACC,EAAS,CAACC,UAAU,aAAaC,IAAK3B,GAChD,C,4FC1CaR,GAAOC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,mMAaTmC,EAAAA,GAAkB,8F,UCH7B,EAVkC,WAChC,OACEJ,EAAAA,EAAAA,KAACC,EAAS,MACRD,EAAAA,EAAAA,KAAA,WAAK,WACLA,EAAAA,EAAAA,KAAA,WAAK,UACLA,EAAAA,EAAAA,KAAA,WAAK,uBAGX,E,8BCgBA,EAZ4C,SAAH3B,GAA2B,IAArBgC,EAAQhC,EAARgC,SACvCC,EADqDjC,EAAJkC,KAC3BC,KAAKC,aAAaC,SAASzB,WAAWX,KAElE,OACE0B,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CAACN,SAAUA,IAChBL,EAAAA,EAAAA,KAACY,EAAAA,EAAG,CAACC,MAAM,wBACXb,EAAAA,EAAAA,KAACc,EAAe,OAChBd,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACzC,KAAMgC,EAAgB/B,KAAK,cAG7C,C","sources":["webpack://danmin-gatsby-blog/./src/components/Utterances/styled.ts","webpack://danmin-gatsby-blog/./src/components/Utterances/index.tsx","webpack://danmin-gatsby-blog/./src/components/GuestbookBanner/styled.ts","webpack://danmin-gatsby-blog/./src/components/GuestbookBanner/index.tsx","webpack://danmin-gatsby-blog/./src/pages/guestbook.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  margin: 30px 0;\r\n`;\r\n","import { ThemeManagerContext } from 'gatsby-emotion-dark-mode';\r\nimport React, { createRef, useContext, useEffect, useRef } from 'react';\r\n\r\nimport * as S from './styled';\r\n\r\nconst src = 'https://utteranc.es/client.js';\r\nconst branch = 'main';\r\n\r\ntype UtterancesProps = {\r\n  repo: string;\r\n  path: string;\r\n};\r\n\r\nconst Utterances: React.FC<UtterancesProps> = ({ repo, path }) => {\r\n  const rootElm = createRef<HTMLDivElement>();\r\n  const isUtterancesLoaded = useRef(false);\r\n  const theme = useContext(ThemeManagerContext);\r\n\r\n  useEffect(() => {\r\n    if (!rootElm.current) return;\r\n\r\n    const utterances = document.createElement('script');\r\n    const utterancesConfig: { [key: string]: unknown } = {\r\n      src,\r\n      repo,\r\n      branch,\r\n      'theme': theme.isDark ? 'photon-dark' : 'github-light',\r\n      'label': 'comment',\r\n      'async': true,\r\n      'issue-term': 'pathname',\r\n      'crossorigin': 'anonymous',\r\n    };\r\n\r\n    Object.keys(utterancesConfig).forEach((configKey) => {\r\n      utterances.setAttribute(configKey, utterancesConfig[configKey] as string);\r\n    });\r\n    rootElm.current.appendChild(utterances);\r\n\r\n    if (isUtterancesLoaded.current) {\r\n      rootElm.current.replaceChild(utterances, rootElm.current.firstChild as Node);\r\n    } else {\r\n      isUtterancesLoaded.current = true;\r\n    }\r\n  }, [rootElm, path, theme.isDark]);\r\n\r\n  return <S.Wrapper className='utterances' ref={rootElm} />;\r\n};\r\n\r\nexport default Utterances;\r\n","import styled from '@emotion/styled';\r\n\r\nimport { MOBILE_MEDIA_QUERY } from '@/src/styles/const';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding-top: 70px;\r\n  padding-bottom: 30px;\r\n  font-size: 18px;\r\n  gap: 10px;\r\n  & > div:first-of-type {\r\n    font-size: 30px;\r\n  }\r\n  @media ${MOBILE_MEDIA_QUERY} {\r\n    padding-top: 50px;\r\n    padding-bottom: 20px;\r\n    font-size: 15px;\r\n    & > div:first-of-type {\r\n      font-size: 27px;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport * as S from './styled';\r\n\r\nconst GuestbookBanner: React.FC = () => {\r\n  return (\r\n    <S.Wrapper>\r\n      <div>üëãüëãüëã</div>\r\n      <div>Î∞òÍ∞ÄÏõåÏöî!</div>\r\n      <div>ÏûêÏú†Î°≠Í≤å Î∞©Î™ÖÎ°ùÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî :)</div>\r\n    </S.Wrapper>\r\n  );\r\n};\r\n\r\nexport default GuestbookBanner;\r\n","import { graphql } from 'gatsby';\r\nimport React from 'react';\r\n\r\nimport GuestbookBanner from '../components/GuestbookBanner';\r\nimport Seo from '../components/Seo';\r\nimport Utterances from '../components/Utterances';\r\nimport Layout from '../layout';\r\nimport { SiteMetadata } from '../type';\r\n\r\ntype GuestbookProps = {\r\n  data: {\r\n    site: { siteMetadata: SiteMetadata };\r\n  };\r\n  location: Location;\r\n};\r\n\r\nconst Guestbook: React.FC<GuestbookProps> = ({ location, data }) => {\r\n  const utterancesRepo = data.site.siteMetadata.comments.utterances.repo;\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <Seo title='Í∞úÎ∞úÏûê Îã®ÎØº | Guestbook' />\r\n      <GuestbookBanner />\r\n      <Utterances repo={utterancesRepo} path='guestbook' />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Guestbook;\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        siteUrl\r\n        comments {\r\n          utterances {\r\n            repo\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["Wrapper","_styled","target","name","styles","_ref","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","theme","useContext","ThemeManagerContext","useEffect","current","utterances","document","createElement","utterancesConfig","src","branch","isDark","Object","keys","forEach","configKey","setAttribute","appendChild","replaceChild","firstChild","___EmotionJSX","S","className","ref","MOBILE_MEDIA_QUERY","location","utterancesRepo","data","site","siteMetadata","comments","Layout","Seo","title","GuestbookBanner","Utterances"],"sourceRoot":""}